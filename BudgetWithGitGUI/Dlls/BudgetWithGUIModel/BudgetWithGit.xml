<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BudgetWithGit</name>
    </assembly>
    <members>
        <member name="T:Budget.BudgetItem">
            <summary>
            A single budget item, includes Category and Expense that sets and gets
            the appropriate fields.
            </summary>
        </member>
        <member name="P:Budget.BudgetItem.CategoryID">
            <summary>
            Gets and sets the category Id.
            </summary>
        </member>
        <member name="P:Budget.BudgetItem.ExpenseID">
            <summary>
            Gets and sets the expense Id.
            </summary>
        </member>
        <member name="P:Budget.BudgetItem.Date">
            <summary>
            Gets and sets the Date.
            </summary>
        </member>
        <member name="P:Budget.BudgetItem.Category">
            <summary>
            Gets and sets the category.
            </summary>
        </member>
        <member name="P:Budget.BudgetItem.ShortDescription">
            <summary>
            Gets and sets a short desciption.
            </summary>
        </member>
        <member name="P:Budget.BudgetItem.Amount">
            <summary>
            Gets and sets the amount.
            </summary>
        </member>
        <member name="P:Budget.BudgetItem.Balance">
            <summary>
            Gets and sets the balance.
            </summary>
        </member>
        <member name="T:Budget.BudgetItemsByMonth">
            <summary>
            Takes the budget items and calcualtes it monthly.
            </summary>
        </member>
        <member name="P:Budget.BudgetItemsByMonth.Month">
            <summary>
            Gets and sets the Month.
            </summary>
        </member>
        <member name="P:Budget.BudgetItemsByMonth.Details">
            <summary>
            Gets and sets the details.
            </summary>
        </member>
        <member name="P:Budget.BudgetItemsByMonth.Total">
            <summary>
            Gets and sets the total.
            </summary>
        </member>
        <member name="T:Budget.BudgetItemsByCategory">
            <summary>
            Takes the budget items and calcualtes it by the category.
            </summary>
        </member>
        <member name="P:Budget.BudgetItemsByCategory.Category">
            <summary>
            Gets and sets the category.
            </summary>
        </member>
        <member name="P:Budget.BudgetItemsByCategory.Details">
            <summary>
            Gets and sets the details.
            </summary>
        </member>
        <member name="P:Budget.BudgetItemsByCategory.Total">
            <summary>
            Gets and sets the total.
            </summary>
        </member>
        <member name="T:Budget.Categories">
            <summary>
            A collection of category items that saves and reads from a database file.
            as well as removing and adding categories. 
            </summary>
        </member>
        <member name="M:Budget.Categories.#ctor(System.Data.SQLite.SQLiteConnection,System.Boolean)">
             <summary>
            Constructor that sets the categories to default if its a new database;
             </summary>
             <param name="conn">The database connection</param>
             <param name="newDb">The boolean that checks if its a new database</param>
        </member>
        <member name="M:Budget.Categories.UpdateProperties(System.Int32,System.String,Budget.Category.CategoryType)">
            <summary>
            Updates the properties of the categories table using SQL queries.Id is not updated
            </summary>
            <param name="id">The id of the category</param>
            <param name="newDescr">The description of the category</param>
            <param name="type">The type of the cateogry</param>
            <returns>The updated categories table</returns>
        </member>
        <member name="M:Budget.Categories.GetCategoryFromId(System.Int32)">
            <summary>
            Finds a specific category from the table where the id is the one that is specified using SQL queries.
            </summary>
            
            <param name="i">The specified ID</param>
            
            <returns>The object category</returns>
        </member>
        <member name="M:Budget.Categories.SetCategoriesToDefaults">
            <summary>
            Sets the categories to default. It resets all current cateogories if any
            </summary>
        </member>
        <member name="M:Budget.Categories.Add(System.String,Budget.Category.CategoryType)">
            <summary>
            Adds categories to the categories table..
            </summary>
            
            <param name="desc">The Desciption of the category</param>
            <param name="type">The Type of the category</param>
        </member>
        <member name="M:Budget.Categories.Delete(System.Int32)">
            <summary>
            Deletes the category from the category table.
            </summary>
            <param name="Id">The id of the category</param>
        </member>
        <member name="M:Budget.Categories.List">
            <summary>
            Retrieves all the columns of the categories table.
            </summary>
            
            <returns>The list of categories</returns>
        </member>
        <member name="T:Budget.Category">
            <summary>
            An individual category for the budget program.
            </summary>
        </member>
        <member name="P:Budget.Category.Id">
            <summary>
            Gets and sets the Id.
            </summary>
        </member>
        <member name="P:Budget.Category.Description">
            <summary>
            Gets and sets the description.
            </summary>
        </member>
        <member name="P:Budget.Category.Type">
            <summary>
            Gets and sets the ENUM type.
            </summary>
        </member>
        <member name="T:Budget.Category.CategoryType">
            <summary>
            An enum with the categories type.
            </summary>
        </member>
        <member name="F:Budget.Category.CategoryType.Income">
            <summary>
            Income category.
            </summary>
        </member>
        <member name="F:Budget.Category.CategoryType.Expense">
            <summary>
            Expense category. 
            </summary>
        </member>
        <member name="F:Budget.Category.CategoryType.Credit">
            <summary>
            Credit category.
            </summary>
        </member>
        <member name="F:Budget.Category.CategoryType.Savings">
            <summary>
            Saving category.
            </summary>
        </member>
        <member name="M:Budget.Category.#ctor(System.Int32,System.String,Budget.Category.CategoryType)">
            <summary>
            Constructor to initalize the object
            </summary>
            
            <param name="id">The ID of the category</param>
            <param name="description"> The desciprtion of the category</param>
            <param name="type">The type of the category</param>
        </member>
        <member name="M:Budget.Category.#ctor(Budget.Category)">
            <summary>
            a copy of a constructor that holds the category object.
            </summary>
            
            <param name="category">The category with the id, description and type</param>
        </member>
        <member name="M:Budget.Category.ToString">
            <summary>
            Outputs the description of the category.
            </summary>
            
            <returns>The Description of the category</returns>
        </member>
        <member name="T:Budget.Database">
            <summary>
            The database class that sets up the entire database.
            </summary>
        </member>
        <member name="M:Budget.Database.newDatabase(System.String)">
            <summary>
            Creates all the tables for this database.
            </summary>
            <param name="path">The file path of the database file</param>
        </member>
        <member name="M:Budget.Database.openExistingDatabase(System.String)">
             <summary>
              Opens an existing database file if the file exits
              
            
             </summary>
             <exception cref="T:System.IO.FileNotFoundException"></exception>
             <param name="path">The file path to the database file.</param>
        </member>
        <member name="M:Budget.Database.CloseDatabaseAndReleaseFile">
            <summary>
            Closes the database.
            </summary>
        </member>
        <member name="T:Budget.Expense">
            <summary>
            Creates an individual expense for the budget program.
            </summary>
        </member>
        <member name="P:Budget.Expense.Id">
            <summary>
             Gets the Id.
            </summary>
        </member>
        <member name="P:Budget.Expense.Date">
            <summary>
             Gets the date.
            </summary>
        </member>
        <member name="P:Budget.Expense.Amount">
            <summary>
             Gets and sets the amount.
            </summary>
        </member>
        <member name="P:Budget.Expense.Description">
            <summary>
             Gets and sets the description.
            </summary>
        </member>
        <member name="P:Budget.Expense.Category">
            <summary>
             Gets and sets the category.
            </summary>
        </member>
        <member name="M:Budget.Expense.#ctor(System.Int32,System.DateTime,System.Int32,System.Double,System.String)">
            <summary>
            Constructor to initalize the object. There is no verification the expense category exists in the
            categories object.
            </summary>
            
            <param name="id">The Id of the expense</param>
            <param name="date">The date of the expense</param>
            <param name="category">The category of the expense</param>
            <param name="amount">The amount of the expense</param>
            <param name="description">The description of the expense</param>
        </member>
        <member name="M:Budget.Expense.#ctor(Budget.Expense)">
            <summary>
            Copy constructor - does a deep copy
            </summary>
            
            <param name="obj">Holds the expense object </param>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Budget.Expenses" -->
        <member name="M:Budget.Expenses.#ctor(System.Data.SQLite.SQLiteConnection)">
             <summary>
            Constructor checks if the database is on.
             </summary>
             <param name="conn">The database connection</param>
        </member>
        <member name="M:Budget.Expenses.Add(System.DateTime,System.Int32,System.Double,System.String)">
            <summary>
            Adds expenses to the exepnses table.
            </summary>
            
            <param name="date">Date due of the expense</param>
            <param name="category">Category of the expense</param>
            <param name="amount">Amount due of the expnese</param>
            <param name="description">Description of the expanse</param>
        </member>
        <member name="M:Budget.Expenses.Delete(System.Int32)">
            <summary>
            Deletes the expanses from the exepenses table.
            </summary>
            <param name="Id">Id of the existing expense</param>
        </member>
        <member name="M:Budget.Expenses.List">
            <summary>
            Retrieves all the columns of the expenses table.
            </summary>
            
            <returns>The list of expenses</returns>
        </member>
        <member name="M:Budget.Expenses.GetExpenseFromId(System.Int32)">
            <summary>
            Finds a specific expense from the table where the id is the one that is specified using SQL queries.
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:Budget.Expenses.UpdateProperties(System.Int32,System.DateTime,System.Int32,System.Double,System.String)">
            <summary>
            Updates the properties of the expenes table using SQL queries.Id is not updated
            </summary>
            <param name="id">The id of the expense</param>
            <param name="newDate">The date to be updated</param>
            <param name="newCategory">The category to be updated</param>
            <param name="newAmount">The amount to be updated</param>
            <param name="newDescription">The description to be updated</param>
            <returns>The updated expenses table</returns>
        </member>
        <member name="T:Budget.HomeBudget">
             <summary>
             Combines categories class and expenses class.
             <see href="Budget.Categories.html"/>
             <see href="Budget.Expenses.html"/>
             </summary>
             <example>
             <code>
                    HomeBudget homeBudget = new HomeBudget(); //No budget file, using default constructor
                    BudgetItemsByCategory budgetCategory = new BudgetItemsByCategory();
            
                    homeBudget.categories.Add("Description", Category.CategoryType.Credit);
            
                    homeBudget.GetBudgetItems(null, null, true, 10); 
                    homeBudget.GetBudgetItemsByMonth(new DateTime(2020, 1, 1), new DateTime(2021, 1, 1), true, 11);
                    homeBudget.GeBudgetItemsByCategory(null, null, true, 12);
                    homeBudget.GetBudgetDictionaryByCategoryAndMonth(null, null, false, 9);
            
                    homeBudget.categories.Delete(11);
                    homeBudget.SaveToFile("FilePath");
             </code>
             </example>
             
        </member>
        <member name="P:Budget.HomeBudget.categories">
            <summary>
            Gets the categories.
            </summary>
        </member>
        <member name="P:Budget.HomeBudget.expenses">
            <summary>
            Gets the expenses.
            </summary>
        </member>
        <member name="M:Budget.HomeBudget.#ctor(System.String,System.Boolean)">
            <summary>
            The only constructor of the HomeBudget class that connects
            to a database.Checks if the file exists and wether or not we opening a new database
            or using an existing one.
            </summary>
            <param name="databaseFile">The database file</param>
            <param name="newDB">The boolean that checks if its a new database or not</param>
        </member>
        <member name="M:Budget.HomeBudget.GetBudgetItems(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Boolean,System.Int32)">
             <summary>
             Gets all expenses list. It joins the categories list with 
             the expenses list using an Inner Join query. 
             </summary>
             
             <param name="Start">The start date</param>
             <param name="End">The end date/ due date</param>
             <param name="FilterFlag">The unwanted item filter.</param>
             <param name="CategoryID">The category id of budget item</param>
            
             <returns>The list of items</returns>
        </member>
        <member name="M:Budget.HomeBudget.GetBudgetItemsByMonth(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Boolean,System.Int32)">
            <summary>
            Group all expenses month by month. Groups by month and year and creates a new list to store it in.
            Calculates the total of the month and creates a list of details. Adds it to the created list.
            uses the query from the getBudgetItems therefore no need to reuse the code.
            </summary>
            
            <param name="Start">The start date </param>
            <param name="End">The due date</param>
            <param name="FilterFlag">The unwanted item filter.</param>
            <param name="CategoryID">The category id of the budget items</param>
            
            <returns>A list of budget items </returns>
        </member>
        <member name="M:Budget.HomeBudget.GeBudgetItemsByCategory(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Boolean,System.Int32)">
            <summary>
            Group all expenses by category. Creats a new list that will hold the grouped categoires.
            uses the query from the getBudgetItems therefore no need to reuse the code.
            </summary>
            
            <param name="Start">The start date </param>
            <param name="End">The due date</param>
            <param name="FilterFlag">The unwanted item filter.</param>
            <param name="CategoryID">The category id of the budget items</param>
            
            <returns>A list of budget items</returns>
        </member>
        <member name="M:Budget.HomeBudget.GetBudgetDictionaryByCategoryAndMonth(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Boolean,System.Int32)">
            <summary>
            Groups all expenses by category and month. Gets all the 
            items by month and breaks the month details into categories. 
            Calculates the final total by category/month. Creates a list of ExpandoObjects(Objects that can have
            properties added to it on the fly).
            </summary>
            
            <param name="Start">The start date</param>
            <param name="End">The due date</param>
            <param name="FilterFlag">The unwanted item filter.</param>
            <param name="CategoryID">The category id of the budget items</param>
            
            <returns>A list of records of all the months/categories</returns>
        </member>
    </members>
</doc>
